{"ast":null,"code":"import { GET_POSTS, UPDATE_POST, GET_POST, ADD_POST, DELETE_POST, POSTS_LOADING } from './types';\nimport axios from 'axios'; // get single post\n\nexport const getSinglePost = id => dispatch => {\n  dispatch(setPostsLoading()); // headers \n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    id\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/api/posts/single', body, config).then(res => dispatch({\n    type: GET_POST,\n    payload: res.data\n  }));\n}; // get all posts\n\nexport const getPosts = () => dispatch => {\n  dispatch(setPostsLoading());\n  axios.get(process.env.REACT_APP_API_LINK + '/api/posts').then(res => dispatch({\n    type: GET_POSTS,\n    payload: res.data\n  }));\n}; // get search results\n\nexport const searchPost = searchValue => dispatch => {\n  dispatch(setPostsLoading()); // headers \n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    searchValue\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/api/posts/search', body, config).then(res => dispatch({\n    type: GET_POSTS,\n    payload: res.data\n  }));\n}; // get all user posts\n\nexport const getUserPosts = id => dispatch => {\n  dispatch(setPostsLoading()); // headers \n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    id\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/api/posts/user', body, config).then(res => dispatch({\n    type: GET_POSTS,\n    payload: res.data\n  }));\n};\nexport const addPost = ({\n  title,\n  date,\n  content,\n  creator\n}) => dispatch => {\n  dispatch(setPostsLoading()); // headers \n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    title,\n    date,\n    content,\n    creator\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/api/posts/', body, config).then(res => dispatch({\n    type: ADD_POST,\n    payload: res.data\n  }));\n};\nexport const updatePost = ({\n  title,\n  _id,\n  content,\n  date\n}) => dispatch => {\n  dispatch(setPostsLoading()); // headers \n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    title,\n    content,\n    _id,\n    date\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/api/posts/update', body, config).then(res => dispatch({\n    type: UPDATE_POST,\n    payload: res.data\n  }));\n}; // no need to have = (title) => because there's only one\n\nexport const deletePost = id => dispatch => {\n  axios.delete(process.env.REACT_APP_API_LINK + `/api/posts/${id}`).then(res => dispatch({\n    type: DELETE_POST,\n    payload: id\n  }));\n};\nexport const setPostsLoading = () => {\n  return {\n    // just sets it from false to true\n    type: POSTS_LOADING\n  };\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/SAMSUNG/W2/PreviouslyOn/client/src/actions/postActions.js"],"names":["GET_POSTS","UPDATE_POST","GET_POST","ADD_POST","DELETE_POST","POSTS_LOADING","axios","getSinglePost","id","dispatch","setPostsLoading","config","headers","body","JSON","stringify","post","process","env","REACT_APP_API_LINK","then","res","type","payload","data","getPosts","get","searchPost","searchValue","getUserPosts","addPost","title","date","content","creator","updatePost","_id","deletePost","delete"],"mappings":"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","sourcesContent":["import { GET_POSTS, UPDATE_POST, GET_POST, ADD_POST, DELETE_POST, POSTS_LOADING } from './types'\r\nimport axios from 'axios'\r\n\r\n// get single post\r\nexport const getSinglePost = id => dispatch => {\r\n    dispatch(setPostsLoading())\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //request info\r\n    const body = JSON.stringify({ id })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/api/posts/single', body, config)\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: res.data\r\n            }))\r\n}\r\n\r\n// get all posts\r\nexport const getPosts = () => dispatch => {\r\n    dispatch(setPostsLoading())\r\n    axios.get(process.env.REACT_APP_API_LINK + '/api/posts')\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_POSTS,\r\n                payload: res.data\r\n            })\r\n        )\r\n}\r\n\r\n// get search results\r\nexport const searchPost = searchValue => dispatch => {\r\n    dispatch(setPostsLoading())\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //request info\r\n    const body = JSON.stringify({ searchValue })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/api/posts/search', body, config)\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_POSTS,\r\n                payload: res.data\r\n            }))\r\n}\r\n\r\n// get all user posts\r\nexport const getUserPosts = id => dispatch => {\r\n    dispatch(setPostsLoading())\r\n\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //request info\r\n    const body = JSON.stringify({ id })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/api/posts/user', body, config)\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_POSTS,\r\n                payload: res.data\r\n            }))\r\n}\r\n\r\nexport const addPost = ({ title, date, content, creator }) => dispatch => {\r\n    dispatch(setPostsLoading())\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //request info\r\n    const body = JSON.stringify({ title, date, content, creator })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/api/posts/', body, config)\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_POST,\r\n                payload: res.data\r\n            }))\r\n}\r\n\r\nexport const updatePost = ({ title, _id, content, date }) => dispatch => {\r\n    dispatch(setPostsLoading())\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //request info\r\n    const body = JSON.stringify({ title, content, _id, date })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/api/posts/update', body, config)\r\n        .then(res =>\r\n            dispatch({\r\n                type: UPDATE_POST,\r\n                payload: res.data\r\n            }))\r\n}\r\n\r\n// no need to have = (title) => because there's only one\r\nexport const deletePost = id => dispatch => {\r\n    axios.delete(process.env.REACT_APP_API_LINK + `/api/posts/${id}`)\r\n        .then(res =>\r\n            dispatch({\r\n                type: DELETE_POST,\r\n                payload: id\r\n            }))\r\n}\r\n\r\nexport const setPostsLoading = () => {\r\n    return {\r\n        // just sets it from false to true\r\n        type: POSTS_LOADING\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}