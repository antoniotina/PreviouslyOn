{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOADED, REGISTER_FAIL, REGISTER_SUCCESS, LOGOUT_SUCCESS, LOGIN_FAIL, LOGIN_SUCCESS, AUTH_ERROR, USER_LOADING } from '../actions/types';\nimport { returnErrors } from './errorActions'; // dispatch is a function of the Redux store. You call store.dispatch to dispatch an action. This is the only way to trigger a state change.\n// check token first and then load the user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // loading user\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(process.env.REACT_APP_API_LINK + '/checktoken', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    // res.data is an object with user object and the token\n    payload: res.data\n  })).catch(err => {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  username,\n  email,\n  password\n}) => dispatch => {\n  // headers \n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    username,\n    email,\n    'key': process.env.REACT_APP_API_KEY,\n    password\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/members/signup', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // setup function for token/headers\n\nexport const tokenConfig = getState => {\n  // getting token\n  const token = getState().auth.token; // headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // if token is good, add it to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n}; //logout no need for dispatch\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //logout no need for dispatch\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // headers \n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    'login': email,\n    'key': process.env.REACT_APP_API_KEY,\n    password\n  });\n  axios.get(process.env.REACT_APP_API_LINK + '/members/auth', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/SAMSUNG/W2/PreviouslyOn/client/src/actions/authActions.js"],"names":["axios","USER_LOADED","REGISTER_FAIL","REGISTER_SUCCESS","LOGOUT_SUCCESS","LOGIN_FAIL","LOGIN_SUCCESS","AUTH_ERROR","USER_LOADING","returnErrors","loadUser","dispatch","getState","type","get","process","env","REACT_APP_API_LINK","tokenConfig","then","res","payload","data","catch","err","register","username","email","password","config","headers","body","JSON","stringify","REACT_APP_API_KEY","post","response","status","token","auth","logout","login"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    USER_LOADED,\r\n    REGISTER_FAIL,\r\n    REGISTER_SUCCESS,\r\n    LOGOUT_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGIN_SUCCESS,\r\n    AUTH_ERROR,\r\n    USER_LOADING\r\n} from '../actions/types'\r\nimport { returnErrors } from './errorActions'\r\n\r\n// dispatch is a function of the Redux store. You call store.dispatch to dispatch an action. This is the only way to trigger a state change.\r\n// check token first and then load the user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    // loading user\r\n    dispatch({ type: USER_LOADING })\r\n\r\n    axios.get(process.env.REACT_APP_API_LINK + '/checktoken', tokenConfig(getState))\r\n        .then(res => dispatch({\r\n            type: USER_LOADED,\r\n            // res.data is an object with user object and the token\r\n            payload: res.data\r\n        }))\r\n        .catch(err => {\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            })\r\n        })\r\n}\r\n\r\n// Register User\r\nexport const register = ({ username, email, password }) => dispatch => {\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n    //request info\r\n    const body = JSON.stringify({ username, email, 'key': process.env.REACT_APP_API_KEY , password })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/members/signup', body, config)\r\n        .then(res => dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data\r\n        }))\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'))\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            })\r\n        })\r\n}\r\n\r\n// setup function for token/headers\r\nexport const tokenConfig = getState => {\r\n    // getting token\r\n    const token = getState().auth.token\r\n\r\n    // headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    // if token is good, add it to headers\r\n    if (token) {\r\n        config.headers['x-auth-token'] = token\r\n    }\r\n    return config\r\n}\r\n\r\n//logout no need for dispatch\r\nexport const logout = () => {\r\n    return {\r\n        type: LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\n//logout no need for dispatch\r\nexport const login = ({ email, password }) => dispatch => {\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //request info\r\n    const body = JSON.stringify({ 'login': email, 'key': process.env.REACT_APP_API_KEY, password })\r\n\r\n    axios.get(process.env.REACT_APP_API_LINK + '/members/auth', body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'))\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            })\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}