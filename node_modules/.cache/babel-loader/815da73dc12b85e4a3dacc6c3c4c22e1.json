{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/SAMSUNG/W2/PreviouslyOn/client/src/components/auth/LoginModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login, lostPasswordEmail } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\n\nclass LoginModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      email: '',\n      newemail: '',\n      password: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.forgotPassword = e => {\n      this.props.lostPasswordEmail({\n        'find': this.state.email\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const {\n        email,\n        password\n      } = this.state;\n      const user = {\n        email,\n        password\n      };\n      this.props.login(user);\n    };\n\n    this.onSubmitChange = e => {\n      e.preventDefault();\n      this.setState({\n        email: this.state.newemail\n      });\n      const {\n        newemail\n      } = this.state;\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      };\n      const body = {\n        \"email\": newemail.toLowerCase()\n      };\n      axios.post(process.env.REACT_APP_API_LINK + \"/password/reset\", body, config).then(res => {\n        toast.success(res.data.message, {\n          position: \"top-center\"\n        });\n        this.toggleChange();\n        this.toggle();\n      }).catch(err => {\n        toast.error(err.response.data.msg, {\n          position: 'top-center'\n        });\n      });\n    };\n  }\n\n  // once the component updates, it's gonna check for errors so it can display them\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      if (error.id === 'LOGIN_FAIL') {\n        // in redux, you can see on the tree that it's MSG > MSG: \"VALUE\" that;s why it's double msg\n        this.setState({\n          msg: error.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // if the modal is open , AKA this.state.modal is true, AND if the user is authenticated which means he has a token, then close the modal because the user successfully registered\n\n\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ToastContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, \"Log in !\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 43\n      }\n    }, \" \", this.state.msg) : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 33\n      }\n    }, \"Email/Username\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Type email\",\n      value: this.state.email !== '' ? this.state.email : '',\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Type password\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      className: \"mt-4\",\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 33\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mt-4 text-info\",\n      style: {\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        if (this.state.email) {\n          this.forgotPassword();\n          this.setState({\n            msg: null\n          });\n        } else this.setState({\n          msg: 'Please write your email/username so we can send an email of password recovery'\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 33\n      }\n    }, \"Forgot password?\"))))));\n  }\n\n}\n\nLoginModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  lostPasswordEmail: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  clearErrors,\n  lostPasswordEmail\n})(LoginModal);","map":{"version":3,"sources":["/opt/lampp/htdocs/SAMSUNG/W2/PreviouslyOn/client/src/components/auth/LoginModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","login","lostPasswordEmail","clearErrors","ToastContainer","toast","axios","LoginModal","state","modal","email","newemail","password","msg","toggle","props","setState","onChange","e","target","name","value","forgotPassword","onSubmit","preventDefault","user","onSubmitChange","config","headers","body","toLowerCase","post","process","env","REACT_APP_API_LINK","then","res","success","data","message","position","toggleChange","catch","err","error","response","componentDidUpdate","prevProps","isAuthenticated","id","render","cursor","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n    Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert\n} from 'reactstrap'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { login, lostPasswordEmail } from '../../actions/authActions'\nimport { clearErrors } from '../../actions/errorActions'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\n\nclass LoginModal extends Component {\n    state = {\n        modal: false,\n        email: '',\n        newemail: '',\n        password: '',\n        msg: null\n    }\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired,\n        login: PropTypes.func.isRequired,\n        lostPasswordEmail: PropTypes.func.isRequired,\n        clearErrors: PropTypes.func.isRequired\n    }\n\n    // once the component updates, it's gonna check for errors so it can display them\n    componentDidUpdate(prevProps) {\n        const { error, isAuthenticated } = this.props\n\n        if (error !== prevProps.error) {\n            if (error.id === 'LOGIN_FAIL') {\n                // in redux, you can see on the tree that it's MSG > MSG: \"VALUE\" that;s why it's double msg\n                this.setState({ msg: error.msg })\n            }\n            else {\n                this.setState({ msg: null })\n            }\n        }\n\n        // if the modal is open , AKA this.state.modal is true, AND if the user is authenticated which means he has a token, then close the modal because the user successfully registered\n        if (this.state.modal) {\n            if (isAuthenticated) {\n                this.toggle()\n            }\n        }\n    }\n\n    toggle = () => {\n        this.props.clearErrors()\n        this.setState({\n            modal: !this.state.modal\n        })\n    }\n\n    onChange = e => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    forgotPassword = e => {\n        this.props.lostPasswordEmail({'find': this.state.email})\n    }\n\n    onSubmit = e => {\n        e.preventDefault()\n\n        const { email, password } = this.state\n\n        const user = {\n            email,\n            password\n        }\n\n        this.props.login(user)\n    }\n\n    onSubmitChange = e => {\n        e.preventDefault()\n        this.setState({email: this.state.newemail})\n        const { newemail } = this.state\n        const config = {\n            headers: {\n                \"Content-type\": \"application/json\"\n            }\n        }\n        const body = {\n            \"email\": newemail.toLowerCase()\n        }\n        axios.post(process.env.REACT_APP_API_LINK + \"/password/reset\", body, config).then(res => {\n           toast.success(res.data.message, { position: \"top-center\" });\n           this.toggleChange();\n           this.toggle();\n        }).catch(err => {\n            toast.error(err.response.data.msg, { position: 'top-center' });\n        });\n    }\n    render() {\n        return (\n            <div>\n                <ToastContainer />\n                <NavLink onClick={this.toggle} href=\"#\">\n                    Login\n                </NavLink>\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>Log in !</ModalHeader>\n                    <ModalBody>\n                        {this.state.msg ? <Alert> {this.state.msg}</Alert> : null}\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"email\">Email/Username</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"email\"\n                                    id=\"email\"\n                                    placeholder=\"Type email\"\n                                    value={this.state.email !== '' ? this.state.email : ''}\n                                    onChange={this.onChange}\n                                />\n                                <Label for=\"password\">Password</Label>\n                                <Input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    placeholder=\"Type password\"\n                                    onChange={this.onChange}\n                                />\n                                <Button color=\"dark\" className=\"mt-4\" block>\n                                    Login\n                                </Button>\n                                <p className='mt-4 text-info' style={{cursor: 'pointer'}} onClick={() => {\n                                    if(this.state.email){\n                                        this.forgotPassword()\n                                        this.setState({msg:null})\n                                    } \n                                    else this.setState({ msg: 'Please write your email/username so we can send an email of password recovery' })\n                                    }}>Forgot password?</p>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n})\n\nexport default connect(\n    mapStateToProps,\n    { login, clearErrors, lostPasswordEmail }\n)(LoginModal)"]},"metadata":{},"sourceType":"module"}