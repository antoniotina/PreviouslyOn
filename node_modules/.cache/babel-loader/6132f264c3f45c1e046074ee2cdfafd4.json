{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/SAMSUNG/W2/PreviouslyOn/client/src/components/auth/RegisterModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      email: '',\n      username: '',\n      password: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const {\n        email,\n        password,\n        username\n      } = this.state; //creates the user from the form data\n\n      const newUser = {\n        email,\n        password,\n        username\n      }; // gonna try and register\n\n      this.props.register(newUser);\n    };\n  }\n\n  // once the component updates, it's gonna check for errors so it can display them\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      if (error.id === 'REGISTER_FAIL') {\n        // in redux, you can see on the tree that it's MSG > MSG: \"VALUE\" that;s why it's double msg\n        this.setState({\n          msg: error.msg.msg\n        });\n        console.log(this.state.msg);\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // if the modal is open , AKA this.state.modal is true, AND if the user is authenticated which means he has a token, then close the modal because the user successfully registered\n\n\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Register!\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 43\n      }\n    }, \" \", this.state.msg) : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"username\",\n      id: \"username\",\n      placeholder: \"Type username\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Type email\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Type password\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      className: \"mt-4\",\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 33\n      }\n    }, \"Register\"))))));\n  }\n\n}\n\nRegisterModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  register,\n  clearErrors\n})(RegisterModal);","map":{"version":3,"sources":["/opt/lampp/htdocs/SAMSUNG/W2/PreviouslyOn/client/src/components/auth/RegisterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","register","clearErrors","RegisterModal","state","modal","email","username","password","msg","toggle","props","setState","onChange","e","target","name","value","onSubmit","preventDefault","newUser","componentDidUpdate","prevProps","error","isAuthenticated","id","console","log","render","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert\r\n} from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { register } from '../../actions/authActions'\r\nimport { clearErrors } from '../../actions/errorActions'\r\n\r\nclass RegisterModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        email: '',\r\n        username: '',\r\n        password: '',\r\n        msg: null\r\n    }\r\n\r\n    static propTypes = {\r\n        isAuthenticated: PropTypes.bool,\r\n        error: PropTypes.object.isRequired,\r\n        register: PropTypes.func.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    }\r\n\r\n    // once the component updates, it's gonna check for errors so it can display them\r\n    componentDidUpdate(prevProps) {\r\n        const { error, isAuthenticated } = this.props\r\n\r\n        if (error !== prevProps.error) {\r\n            if (error.id === 'REGISTER_FAIL') {\r\n                // in redux, you can see on the tree that it's MSG > MSG: \"VALUE\" that;s why it's double msg\r\n                this.setState({ msg: error.msg.msg })\r\n                console.log(this.state.msg)\r\n            }\r\n            else {\r\n                this.setState({ msg: null })\r\n            }\r\n        }\r\n\r\n        // if the modal is open , AKA this.state.modal is true, AND if the user is authenticated which means he has a token, then close the modal because the user successfully registered\r\n        if (this.state.modal) {\r\n            if (isAuthenticated) {\r\n                this.toggle()\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        this.props.clearErrors()\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        })\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        const { email, password, username } = this.state\r\n\r\n        //creates the user from the form data\r\n        const newUser = {\r\n            email,\r\n            password,\r\n            username\r\n        }\r\n\r\n        // gonna try and register\r\n        this.props.register(newUser)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavLink onClick={this.toggle} href=\"#\">\r\n                    Register\r\n                </NavLink>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Register!</ModalHeader>\r\n                    <ModalBody>\r\n                        {this.state.msg ? <Alert> {this.state.msg}</Alert> : null}\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"username\">Username</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"username\"\r\n                                    id=\"username\"\r\n                                    placeholder=\"Type username\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <Label for=\"email\">Email</Label>\r\n                                <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    placeholder=\"Type email\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <Label for=\"password\">Password</Label>\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Type password\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <Button color=\"dark\" className=\"mt-4\" block>\r\n                                    Register\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    error: state.error\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { register, clearErrors }\r\n)(RegisterModal)"]},"metadata":{},"sourceType":"module"}