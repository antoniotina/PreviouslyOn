{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOADED, USER_LOADED_TOKEN, REGISTER_FAIL, REGISTER_SUCCESS, LOGOUT_SUCCESS, LOGIN_FAIL, LOGIN_SUCCESS, AUTH_ERROR, USER_LOADING } from '../actions/types';\nimport { returnErrors } from './errorActions';\nimport md5 from 'md5'; // dispatch is a function of the Redux store. You call store.dispatch to dispatch an action. This is the only way to trigger a state change.\n// check token first and then load the user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // loading user\n  dispatch({\n    type: USER_LOADING\n  });\n  const token = localStorage.getItem('token');\n  axios.get(process.env.REACT_APP_API_LINK + '/members/is_active?token=' + token + '&key=' + process.env.REACT_APP_API_KEY).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      // res.data is an object with user object and the token\n      payload: res.data\n    });\n    axios.get(process.env.REACT_APP_API_LINK + '/members/infos?token=' + token + '&key=' + process.env.REACT_APP_API_KEY).then(res => dispatch({\n      type: USER_LOADED,\n      // res.data is an object with user object and the token\n      payload: res.data\n    }));\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  username,\n  email,\n  password\n}) => dispatch => {\n  // headers \n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    'login': username,\n    email,\n    'key': process.env.REACT_APP_API_KEY,\n    password\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/members/signup', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // setup function for token/headers\n\nexport const tokenConfig = getState => {\n  // getting token\n  const token = getState().auth.token; // headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // if token is good, add it to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n}; //logout no need for dispatch\n\nexport const logout = token => {\n  // headers \n  // const config = {\n  //     headers: {\n  //         \"Content-type\": \"application/json\"\n  //     }\n  // }\n  // //request info\n  // const body = JSON.stringify({ token, 'key': process.env.REACT_APP_API_KEY })\n  // axios.post(process.env.REACT_APP_API_LINK + '/members/destroy', body, config)\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //logout no need for dispatch\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // headers \n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    'login': email,\n    'key': process.env.REACT_APP_API_KEY,\n    'password': md5(password)\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/members/auth', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // lost password/ send email\n\nexport const lostPasswordEmail = ({\n  find\n}) => dispatch => {\n  // headers \n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //request info\n\n  const body = JSON.stringify({\n    find,\n    'key': process.env.REACT_APP_API_KEY\n  });\n  axios.post(process.env.REACT_APP_API_LINK + '/members/lost', body, config);\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/SAMSUNG/W2/PreviouslyOn/client/src/actions/authActions.js"],"names":["axios","USER_LOADED","USER_LOADED_TOKEN","REGISTER_FAIL","REGISTER_SUCCESS","LOGOUT_SUCCESS","LOGIN_FAIL","LOGIN_SUCCESS","AUTH_ERROR","USER_LOADING","returnErrors","md5","loadUser","dispatch","getState","type","token","localStorage","getItem","get","process","env","REACT_APP_API_LINK","REACT_APP_API_KEY","then","res","payload","data","catch","err","register","username","email","password","config","headers","body","JSON","stringify","post","response","status","tokenConfig","auth","logout","login","lostPasswordEmail","find"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    USER_LOADED,\r\n    USER_LOADED_TOKEN,\r\n    REGISTER_FAIL,\r\n    REGISTER_SUCCESS,\r\n    LOGOUT_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGIN_SUCCESS,\r\n    AUTH_ERROR,\r\n    USER_LOADING\r\n} from '../actions/types'\r\nimport { returnErrors } from './errorActions'\r\nimport md5 from 'md5'\r\n\r\n// dispatch is a function of the Redux store. You call store.dispatch to dispatch an action. This is the only way to trigger a state change.\r\n// check token first and then load the user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    // loading user\r\n    dispatch({ type: USER_LOADING })\r\n    const token = localStorage.getItem('token')\r\n\r\n    axios.get(process.env.REACT_APP_API_LINK + '/members/is_active?token=' + token + '&key=' + process.env.REACT_APP_API_KEY)\r\n        .then(res => {\r\n            dispatch({\r\n                type: USER_LOADED,\r\n                // res.data is an object with user object and the token\r\n                payload: res.data\r\n            })\r\n            axios.get(process.env.REACT_APP_API_LINK + '/members/infos?token=' + token + '&key=' + process.env.REACT_APP_API_KEY)\r\n                .then(res => dispatch({\r\n                    type: USER_LOADED,\r\n                    // res.data is an object with user object and the token\r\n                    payload: res.data\r\n                }))\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            })\r\n        })\r\n\r\n\r\n}\r\n\r\n// Register User\r\nexport const register = ({ username, email, password }) => dispatch => {\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n    //request info\r\n    const body = JSON.stringify({ 'login': username, email, 'key': process.env.REACT_APP_API_KEY, password })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/members/signup', body, config)\r\n        .then(res => dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data\r\n        }))\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'))\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            })\r\n        })\r\n}\r\n\r\n// setup function for token/headers\r\nexport const tokenConfig = getState => {\r\n    // getting token\r\n    const token = getState().auth.token\r\n\r\n    // headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    // if token is good, add it to headers\r\n    if (token) {\r\n        config.headers['x-auth-token'] = token\r\n    }\r\n    return config\r\n}\r\n\r\n//logout no need for dispatch\r\nexport const logout = (token) => {\r\n    // headers \r\n    // const config = {\r\n    //     headers: {\r\n    //         \"Content-type\": \"application/json\"\r\n    //     }\r\n    // }\r\n    // //request info\r\n    // const body = JSON.stringify({ token, 'key': process.env.REACT_APP_API_KEY })\r\n\r\n    // axios.post(process.env.REACT_APP_API_LINK + '/members/destroy', body, config)\r\n\r\n    return {\r\n        type: LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\n//logout no need for dispatch\r\nexport const login = ({ email, password }) => dispatch => {\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //request info\r\n    const body = JSON.stringify({ 'login': email, 'key': process.env.REACT_APP_API_KEY, 'password': md5(password) })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/members/auth', body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'))\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            })\r\n        })\r\n}\r\n\r\n// lost password/ send email\r\nexport const lostPasswordEmail = ({ find }) => dispatch => {\r\n    // headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //request info\r\n    const body = JSON.stringify({ find, 'key': process.env.REACT_APP_API_KEY })\r\n\r\n    axios.post(process.env.REACT_APP_API_LINK + '/members/lost', body, config)\r\n}"]},"metadata":{},"sourceType":"module"}